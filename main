import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionListener;
import java.sql.*;

public class PhonebookApp {
    private JFrame frame;
    private JTextField nameField, phoneField, emailField, addressField;
    private JTable table;
    private DefaultTableModel tableModel;

    // Database credentials
    private static final String DB_URL = "jdbc:mysql://localhost:3306/sakila";
    private static final String DB_USER = "root";  // Change this if necessary
    private static final String DB_PASSWORD = "My$ql_$erveR@2024";  // Change this

    public PhonebookApp() {
        frame = new JFrame("📞 Phonebook App");
        frame.setSize(700, 500);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new BorderLayout(10, 10));
        frame.getContentPane().setBackground(new Color(240, 240, 240));

        // Panel for Form Inputs
        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(5, 2, 10, 10));
        panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // Input Fields
        nameField = createStyledTextField();
        phoneField = createStyledTextField();
        emailField = createStyledTextField();
        addressField = createStyledTextField();

        panel.add(createStyledLabel("Name:"));
        panel.add(nameField);

        panel.add(createStyledLabel("Phone:"));
        panel.add(phoneField);

        panel.add(createStyledLabel("Email:"));
        panel.add(emailField);

        panel.add(createStyledLabel("Address:"));
        panel.add(addressField);

        frame.add(panel, BorderLayout.NORTH);

        // Buttons Panel
        JPanel buttonPanel = new JPanel(new GridLayout(1, 4, 10, 10));
        buttonPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        JButton addButton = createStyledButton("Add", "➕", e -> addContact());
        JButton updateButton = createStyledButton("Update", "✏️", e -> updateContact());
        JButton deleteButton = createStyledButton("Delete", "❌", e -> deleteContact());
        JButton viewButton = createStyledButton("View", "📄", e -> loadContacts());

        buttonPanel.add(addButton);
        buttonPanel.add(updateButton);
        buttonPanel.add(deleteButton);
        buttonPanel.add(viewButton);

        frame.add(buttonPanel, BorderLayout.SOUTH);

        // Table to Display Contacts
        tableModel = new DefaultTableModel(new String[]{"ID", "Name", "Phone", "Email", "Address"}, 0);
        table = new JTable(tableModel);
        table.setRowHeight(25);
        table.setFont(new Font("Arial", Font.PLAIN, 14));

        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        frame.add(scrollPane, BorderLayout.CENTER);

        loadContacts(); // Load contacts on startup

        frame.setVisible(true);
    }

    // Creates a connection to MySQL
    private Connection connect() throws SQLException {
        return DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
    }

    // Loads contacts from the database into the table
    private void loadContacts() {
        try (Connection conn = connect();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM contacts")) {

            tableModel.setRowCount(0); // Clear table
            while (rs.next()) {
                tableModel.addRow(new Object[]{
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getString("phone"),
                        rs.getString("email"),
                        rs.getString("address")
                });
            }
        } catch (SQLException e) {
            showErrorDialog("Error loading contacts: " + e.getMessage());
        }
    }

    // Adds a new contact to the database
    private void addContact() {
        String name = nameField.getText().trim();
        String phone = phoneField.getText().trim();
        String email = emailField.getText().trim();
        String address = addressField.getText().trim();

        if (name.isEmpty() || phone.isEmpty()) {
            showErrorDialog("Name and Phone cannot be empty!");
            return;
        }

        try (Connection conn = connect();
             PreparedStatement pstmt = conn.prepareStatement("INSERT INTO contacts (name, phone, email, address) VALUES (?, ?, ?, ?)")) {

            pstmt.setString(1, name);
            pstmt.setString(2, phone);
            pstmt.setString(3, email);
            pstmt.setString(4, address);
            pstmt.executeUpdate();
            showSuccessDialog("Contact added successfully!");
            loadContacts();
        } catch (SQLException e) {
            showErrorDialog("Error adding contact: " + e.getMessage());
        }
    }

    // Updates the selected contact in the database
    private void updateContact() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            showErrorDialog("Select a contact to update!");
            return;
        }

        int id = (int) tableModel.getValueAt(selectedRow, 0);
        String name = nameField.getText().trim();
        String phone = phoneField.getText().trim();
        String email = emailField.getText().trim();
        String address = addressField.getText().trim();

        if (name.isEmpty() || phone.isEmpty()) {
            showErrorDialog("Name and Phone cannot be empty!");
            return;
        }

        try (Connection conn = connect();
             PreparedStatement pstmt = conn.prepareStatement("UPDATE contacts SET name=?, phone=?, email=?, address=? WHERE id=?")) {

            pstmt.setString(1, name);
            pstmt.setString(2, phone);
            pstmt.setString(3, email);
            pstmt.setString(4, address);
            pstmt.setInt(5, id);
            pstmt.executeUpdate();
            showSuccessDialog("Contact updated successfully!");
            loadContacts();
        } catch (SQLException e) {
            showErrorDialog("Error updating contact: " + e.getMessage());
        }
    }

    // Deletes the selected contact from the database
    private void deleteContact() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            showErrorDialog("Select a contact to delete!");
            return;
        }

        int id = (int) tableModel.getValueAt(selectedRow, 0);
        int confirm = JOptionPane.showConfirmDialog(frame, "Are you sure you want to delete this contact?", "Confirm Delete", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection conn = connect();
                 PreparedStatement pstmt = conn.prepareStatement("DELETE FROM contacts WHERE id=?")) {

                pstmt.setInt(1, id);
                pstmt.executeUpdate();
                showSuccessDialog("Contact deleted successfully!");
                loadContacts();
            } catch (SQLException e) {
                showErrorDialog("Error deleting contact: " + e.getMessage());
            }
        }
    }

    // Utility Methods for Styling UI Elements
    private JLabel createStyledLabel(String text) {
        JLabel label = new JLabel(text);
        label.setFont(new Font("Arial", Font.BOLD, 14));
        return label;
    }

    private JTextField createStyledTextField() {
        JTextField textField = new JTextField();
        textField.setFont(new Font("Arial", Font.PLAIN, 14));
        return textField;
    }

    private JButton createStyledButton(String text, String emoji, ActionListener actionListener) {
        JButton button = new JButton(emoji + " " + text);
        button.setFont(new Font("Arial", Font.BOLD, 14));
        button.addActionListener(actionListener);
        return button;
    }

    private void showErrorDialog(String message) {
        JOptionPane.showMessageDialog(frame, message, "Error", JOptionPane.ERROR_MESSAGE);
    }

    private void showSuccessDialog(String message) {
        JOptionPane.showMessageDialog(frame, message, "Success", JOptionPane.INFORMATION_MESSAGE);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(PhonebookApp::new);
    }
}
